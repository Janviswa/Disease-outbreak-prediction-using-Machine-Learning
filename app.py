import streamlit as st
import pickle
import numpy as np
from io import BytesIO
from fpdf import FPDF
import os
import base64
from datetime import datetime

# Page Configuration
st.set_page_config(page_title="Checkup Buddy", layout="wide", page_icon="ЁЯзл")

with st.sidebar:
    # Center the image using columns
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        st.image("Images/Logo 1.png", width=200)
# Language Selection
lang = st.sidebar.selectbox("ЁЯМР Select Language / роорпКро┤ро┐ропрпИропрпИ родрпЗро░рпНро╡рпБ роЪрпЖро▓рпНро▓ро╡рпБроорпН", ["English", "Tamil"])

# Translations
def get_translations():
    return {
        "English": {
            "title": "Disease Prediction Model тЪХя╕П",
            "welcome": "Welcome to the Disease Prediction Web App",
            "about": "### About\nThis application uses machine learning to predict the risk of three major diseases using user-provided health metrics.",
            "instructions": "### Instructions\n1. Use the **sidebar** to select a disease (Heart, Diabetes, or ParkinsonтАЩs).\n2. Enter the patientтАЩs information and test values.\n3. Click **Diagnose** to view the prediction and advice.\n4. Download a PDF report if needed.",
            "purpose": "### Purpose\nEarly detection can help initiate medical consultation and preventive care.",
            "contact": "ЁЯУз Contact",
            "disclaimer": "тЬЕ This tool is for **educational** and **preventive awareness** purposes only.\nAlways consult a licensed medical professional for real diagnoses.",
            "nav": "## Navigation",
            "goto": "Go to",
            "home": "Home",
            "no_risk": "The Person does not have a risk of",
            "risk": "The Person has a risk of",
            "download": "ЁЯУД Download Report (PDF)",
            "advice": "ЁЯТб Advice",
            "heart": "Heart Disease Prediction",
            "diabetes": "Diabetes Prediction",
            "parkinsons": "Parkinson's Disease Prediction",
            "diagnose": "Diagnose",
            "advice_heart_positive": "Consult a cardiologist.",
            "advice_heart_negative": "Maintain a healthy lifestyle.",
            "advice_diabetes_positive": "Check sugar regularly.",
            "advice_diabetes_negative": "Maintain a balanced diet and exercise.",
            "advice_parkinsons_positive": "Consult a neurologist.",
            "advice_parkinsons_negative": "Stay active and healthy.",
            "inputs_heart": {
                "name": "Patient Name", "age": "Age", "sex": "Sex", "cp": "Chest Pain Type",
                "trestbps": "Resting Blood Pressure", "chol": "Serum Cholesterol",
                "fbs": "Fasting Blood Sugar", "restecg": "Resting ECG", "thalach": "Max Heart Rate",
                "exang": "Exercise Induced Angina", "oldpeak": "ST Depression",
                "slope": "Slope of ST", "ca": "Major Vessels Colored", "thal": "Thalassemia",
                "options": {"sex": ["0 - Male", "1 - Female"]}
            },
            "inputs_diabetes": {
                "name": "Patient Name", "age": "Age", "sex": "Sex","pregnancies": "Pregnancies", "glucose": "Glucose",
                "blood_pressure": "Blood Pressure", "skin_thickness": "Skin Thickness",
                "insulin": "Insulin", "bmi": "BMI", "dpf": "Diabetes Pedigree Function",
                "options": {"sex": ["0 - Male", "1 - Female"]}
            },
            "inputs_parkinsons": {
                "name": "Patient Name", "age": "Age", "sex": "Sex", "fo": "MDVP:Fo(Hz)", "fhi": "MDVP:Fhi(Hz)",
                "flo": "MDVP:Flo(Hz)", "jitter": "MDVP:Jitter(%)", "jitter_abs": "MDVP:Jitter(Abs)",
                "rap": "MDVP:RAP", "ppq": "MDVP:PPQ", "ddp": "Jitter:DDP", "shimmer": "MDVP:Shimmer",
                "shimmer_db": "MDVP:Shimmer(dB)", "apq3": "Shimmer:APQ3", "apq5": "Shimmer:APQ5",
                "apq": "MDVP:APQ", "dda": "Shimmer:DDA", "nhr": "NHR", "hnr": "HNR",
                "rpde": "RPDE", "dfa": "DFA", "spread1": "Spread1", "spread2": "Spread2",
                "d2": "D2", "ppe": "PPE", "options": {"sex": ["0 - Male", "1 - Female"]}
            }
        },

        "Tamil": {
            "title": "роирпЛропрпН роХрогро┐рокрпНрокродро▒рпНроХро╛рой рооро╛родро▓рпН тЪХя╕П",
            "welcome": "роирпЛропрпН роХрогро┐рокрпНрокрпБ роЗрогрпИроп рокропройрпНрокро╛роЯрпНроЯро┐ро▒рпНроХрпБ ро╡ро░ро╡рпЗро▒рпНроХро┐ро▒рпЛроорпН",
            "about": "### рокро▒рпНро▒ро┐\nроЗроирпНрод рокропройрпНрокро╛роЯрпБ, рокропройро░рпН ро╡ро┤роЩрпНроХрпБроорпН роЙроЯро▓рпНроиро▓роХрпН роХрпВро▒рпБроХро│рпИ роЕроЯро┐рокрпНрокроЯрпИропро╛роХроХрпН роХрпКрогрпНроЯрпБ роорпВройрпНро▒рпБ роорпБроХрпНроХро┐роп роирпЛропрпНроХро│ро┐ройрпН роЕрокро╛ропродрпНродрпИ роЗропроирпНродро┐ро░роХрпН роХро▒рпНро▒ро▓ро┐ройрпН роорпВро▓роорпН роХрогро┐роХрпНроХро┐ро▒родрпБ.",
            "instructions": "### ро╡ро┤ро┐роорпБро▒рпИроХро│рпН\n1. рокроХрпНроХрокрпНрокроЯрпНроЯро┐ропро┐ро▓рпН роЗро░рпБроирпНродрпБ (роЗродроп роирпЛропрпН, роородрпБроорпЗроХроорпН роЕро▓рпНро▓родрпБ рокро╛ро░рпНроХро┐ройрпНроЪройрпН) родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН.\n2. роирпЛропро╛ро│ро┐ропро┐ройрпН ро╡ро┐ро╡ро░роЩрпНроХро│рпИропрпБроорпН рооро░рпБродрпНродрпБро╡ роородро┐рокрпНрокрпАроЯрпБроХро│рпИропрпБроорпН роЙро│рпНро│ро┐роЯро╡рпБроорпН.\n3. **роХрогро┐роХрпНроХро╡рпБроорпН** рокрпКродрпНродро╛ройрпИ роЕро┤рпБродрпНродро╡рпБроорпН.\n4. родрпЗро╡рпИрокрпНрокроЯрпНроЯро╛ро▓рпН PDF роЕро▒ро┐роХрпНроХрпИропрпИ рокродро┐ро╡ро┐ро▒роХрпНроХро╡рпБроорпН.",
            "purpose": "### роирпЛроХрпНроХроорпН\nроорпБройрпНроХрпВроЯрпНроЯро┐роп роХрогрпНроЯро▒ро┐родро▓рпН рооро░рпБродрпНродрпБро╡ роЖро▓рпЛроЪройрпИропрпИропрпБроорпН родроЯрпБрокрпНрокрпБ рокро░ро╛рооро░ро┐рокрпНрокрпИропрпБроорпН родрпБро╡роХрпНроХ роЙродро╡рпБроорпН.",
            "contact": "ЁЯУз родрпКроЯро░рпНрокрпБроХрпНроХрпБ",
            "disclaimer": "тЬЕ роЗроирпНрод роХро░рпБро╡ро┐ роХро▓рпНро╡ро┐ рооро▒рпНро▒рпБроорпН родроЯрпБрокрпНрокрпБ ро╡ро┐ро┤ро┐рокрпНрокрпБрогро░рпНро╡рпБ роирпЛроХрпНроХродрпНродро┐ро▒рпНроХро╛роХ роороЯрпНроЯрпБроорпЗ.\nроЙрогрпНроорпИропро╛рой рооро░рпБродрпНродрпБро╡роХрпН роХрогрпНроЯро▒ро┐родро▓рпБроХрпНроХро╛роХ родро╡ро▒ро╛рооро▓рпН родроХрпБродро┐ропрпБро│рпНро│ рооро░рпБродрпНродрпБро╡ роиро┐рокрпБрогро░рпИ роЕрогрпБроХро╡рпБроорпН.",
            "nav": "## ро╡ро┤ро┐роЪрпЖро▓рпБродрпНродро▓рпН",
            "goto": "роЪрпЖро▓рпНро▓",
            "home": "роорпБроХрокрпНрокрпБ",
            "no_risk": "роирокро░рпБроХрпНроХрпБ роирпЛропрпНроХрпНроХро╛рой роЕрокро╛ропроорпН роЗро▓рпНро▓рпИ",
            "risk": "роирокро░рпБроХрпНроХрпБ роирпЛропрпНроХрпНроХро╛рой роЕрокро╛ропроорпН роЙро│рпНро│родрпБ",
            "download": "ЁЯУД роЕро▒ро┐роХрпНроХрпИропрпИ рокродро┐ро╡ро┐ро▒роХрпНроХро╡рпБроорпН (PDF)",
            "advice": "ЁЯТб роЖро▓рпЛроЪройрпИ",
            "heart": "роЗродроп роирпЛропрпН роХрогро┐рокрпНрокрпБ",
            "diabetes": "роородрпБроорпЗроХроорпН роХрогро┐рокрпНрокрпБ",
            "parkinsons": "рокро╛ро░рпНроХро┐ройрпНроЪройрпН роирпЛропрпН роХрогро┐рокрпНрокрпБ",
            "diagnose": "роХрогро┐роХрпНроХро╡рпБроорпН",
            "advice_heart_positive": "рооро░рпБродрпНродрпБро╡ роЖро▓рпЛроЪройрпИроХрпНроХро╛роХ роХро╛ро░рпНроЯро┐ропро╛ро▓роЬро┐ро╕рпНроЯрпИрокрпН рокро╛ро░рпБроЩрпНроХро│рпН.",
            "advice_heart_negative": "роиро▓рпНро▓ ро╡ро╛ро┤рпНроХрпНроХрпИ роорпБро▒рпИропрпИ рокро░ро╛рооро░ро┐роХрпНроХро╡рпБроорпН.",
            "advice_diabetes_positive": "роЗро░родрпНрод роЪро░рпНроХрпНроХро░рпИ роиро┐ро▓рпИропрпИ роЕроЯро┐роХрпНроХроЯро┐ рокро░ро┐роЪрпЛродро┐роХрпНроХро╡рпБроорпН.",
            "advice_diabetes_negative": "рооройроиро▓ройрпБроЯройрпН роЙрогро╡рпБ рокро┤роХрпНроХро╡ро┤роХрпНроХродрпНродрпИропрпБроорпН рокропро┐ро▒рпНроЪро┐ропрпИропрпБроорпН рокро┐ройрпНрокро▒рпНро▒ро╡рпБроорпН.",
            "advice_parkinsons_positive": "роиро░роорпНрокро┐ропро▓рпН роиро┐рокрпБрогро░рпИ роЕрогрпБроХро╡рпБроорпН.",
            "advice_parkinsons_negative": "роЪрпБро▒рпБроЪрпБро▒рпБрокрпНрокро╛роХро╡рпБроорпН роЖро░рпЛроХрпНроХро┐ропрооро╛роХро╡рпБроорпН роЗро░рпБроЩрпНроХро│рпН.",
            "inputs_heart": {
                "name": "роирпЛропро╛ро│ро┐ рокрпЖропро░рпН", "age": "ро╡ропродрпБ", "sex": "рокро╛ро▓ро┐ройроорпН", "cp": "рооро╛ро░рпНрокрпБродро╡ро┐роЪрпНроЪрпКроЯрпНроЯрпБ ро╡роХрпИ",
                "trestbps": "роУропрпНро╡рпБ роЗро░родрпНрод роЕро┤рпБродрпНродроорпН", "chol": "роЪрпЗро░роорпН роХрпКро┤рпБрокрпНрокрпБ роЕро│ро╡рпБ",
                "fbs": "роЙрогро╡ро┐ро▒рпНроХрпБ рокро┐роирпНродрпИроп роЗро░родрпНрод роЪро░рпНроХрпНроХро░рпИ", "restecg": "роУропрпНро╡рпБ ECG роорпБроЯро┐ро╡рпБроХро│рпН", "thalach": "роЕродро┐роХрокроЯрпНроЪ роЗродроп родрпБроЯро┐рокрпНрокрпБ",
                "exang": "ро╡ро┐ро│рпИропро╛роЯрпНроЯрпБ роирпЗро░родрпНродро┐ро▓рпН роПроЮрпНроЪро┐ройро╛", "oldpeak": "ST родро╛ро┤рпНро╡рпБ роородро┐рокрпНрокрпБ",
                "slope": "ST роЙро░рпИропро┐ройрпН роЪро╛ропрпНро╡рпБ", "ca": "ро╡рогрпНрогрооро┐роЯрокрпНрокроЯрпНроЯ рокрпЖро░ро┐роп роЗро░родрпНродроХрпН роХрпБро┤ро╛ропрпНроХро│рпН", "thal": "родро▓ро╛роЪрпАрооро┐ропро╛",
                "options": {"sex": ["0 - роЖрогрпН", "1 - рокрпЖрогрпН"]}
            },
            "inputs_diabetes": {
                "name": "роирпЛропро╛ро│ро┐ рокрпЖропро░рпН", "age": "ро╡ропродрпБ", "sex": "рокро╛ро▓ро┐ройроорпН","pregnancies": "роХро░рпБрокрпНрокрпИ роирпЛропрпНроХро│рпН", "glucose": "роХрпБро│рпБроХрпНроХрпЛро╕рпН",
                "blood_pressure": "роЗро░родрпНрод роЕро┤рпБродрпНродроорпН", "skin_thickness": "родрпЛро▓рпН родроЯро┐рокрпНрокрпБ",
                "insulin": "роЗройрпНроЪрпБро▓ро┐ройрпН", "bmi": "роЙроЯро▓рпН роХрпБрооро┐ро┤рпНро╡рпБрокрпН роХро╛роЯрпНроЯро┐", "dpf": "рооро░рокрогрпБ роЪрпЖропро▓рпНрокро╛роЯрпБ",
                "options": {"sex": ["0 - роЖрогрпН", "1 - рокрпЖрогрпН"]}
            },
            "inputs_parkinsons": {
                "name": "роирпЛропро╛ро│ро┐ рокрпЖропро░рпН", "age": "ро╡ропродрпБ", "sex": "рокро╛ро▓ро┐ройроорпН","fo": "MDVP:Fo(Hz)", "fhi": "MDVP:Fhi(Hz)",
                "flo": "MDVP:Flo(Hz)", "jitter": "MDVP:Jitter(%)", "jitter_abs": "MDVP:Jitter(Abs)",
                "rap": "MDVP:RAP", "ppq": "MDVP:PPQ", "ddp": "Jitter:DDP", "shimmer": "MDVP:Shimmer",
                "shimmer_db": "MDVP:Shimmer(dB)", "apq3": "Shimmer:APQ3", "apq5": "Shimmer:APQ5",
                "apq": "MDVP:APQ", "dda": "Shimmer:DDA", "nhr": "NHR", "hnr": "HNR",
                "rpde": "RPDE", "dfa": "DFA", "spread1": "Spread1", "spread2": "Spread2",
                "d2": "D2", "ppe": "PPE", "options": {"sex": ["0 - роЖрогрпН", "1 - рокрпЖрогрпН"]}
            }
        }
    }

# Use selected language translation
translations = get_translations()
T = translations[lang]

# Sidebar Navigation
with st.sidebar:
    st.markdown(T["nav"])
    selection = st.radio(T["goto"], [T["home"], T["heart"], T["diabetes"], T["parkinsons"]])
    st.markdown("---")
    st.markdown(f"### {T['contact']}")
    st.write("jananiviswa05@gmail.com")

# Load Models
heart_model = pickle.load(open('Saved Models/heart_disease_model.sav', 'rb'))
heart_scaler = pickle.load(open('Saved Models/scaler_heart.sav', 'rb'))

diabetes_model = pickle.load(open('Saved Models/diabetes_model.sav', 'rb'))
diabetes_scaler = pickle.load(open('Saved Models/scaler_diabetes.sav', 'rb'))

parkinsons_model = pickle.load(open('Saved Models/parkinsons_model.sav', 'rb'))
parkinsons_scaler = pickle.load(open('Saved Models/scaler_parkinsons.sav', 'rb'))

# Prediction functions
def predict_heart_disease(features):
    arr = heart_scaler.transform([features])
    return heart_model.predict(arr)[0]

def predict_diabetes(features):
    arr = diabetes_scaler.transform([features])
    return diabetes_model.predict(arr)[0]

def predict_parkinsons(features):
    arr = parkinsons_scaler.transform([features])
    return parkinsons_model.predict(arr)[0]

class PDF(FPDF):
    def __init__(self):
        super().__init__()
        self.set_auto_page_break(auto=True, margin=15)

        # Font paths
        regular_font_path = "Font/NotoSansTamil-Regular.ttf"
        bold_font_path = "Font/NotoSansTamil-Bold.ttf"

        # Font availability check
        if not os.path.exists(regular_font_path) or not os.path.exists(bold_font_path):
            raise FileNotFoundError("Required Tamil fonts not found in 'Font/' directory.")

        self.add_font("Noto", "", regular_font_path, uni=True)
        self.add_font("Noto", "B", bold_font_path, uni=True)

        self.set_font("Noto", "", 12)

    def header(self):
        logo_path = "Images/Logo 1.png"
        if os.path.exists(logo_path):
            self.image(logo_path, x=10, y=8, w=25)
        self.set_font("Noto", "B", 14)
        self.cell(0, 10, "Health Diagnosis Report", ln=True, align='C')
        self.ln(5)

    def footer(self):
        self.set_y(-15)
        self.set_font("Noto", "", 9)
        self.cell(0, 10, f"Page {self.page_no()}", align='C')

def generate_pdf(name, result, advice, T, inputs_dict):
    pdf = PDF()
    pdf.add_page()

    # Main Title
    pdf.set_font("Noto", "B", 16)
    pdf.cell(0, 10, T["title"], ln=True, align='C')
    pdf.ln(8)

    # Patient Name
    pdf.set_font("Noto", "B", 12)
    pdf.cell(0, 10, f"{T['inputs_heart']['name']}: {name}", ln=True)
    pdf.ln(4)

    # Health Data Table
    pdf.set_font("Noto", "B", 12)
    pdf.cell(0, 10, "Entered Health Data:", ln=True)
    pdf.set_font("Noto", "", 11)

    pdf.set_fill_color(245, 245, 245)
    col_width_label = 70
    col_width_value = 110
    row_height = 8

    for label, value in inputs_dict.items():
        label_text = str(label)
        value_text = str(value)
        if len(value_text) > 50:
            value_text = value_text[:47] + "..."
        pdf.cell(col_width_label, row_height, label_text, border=1, fill=True)
        pdf.cell(col_width_value, row_height, value_text, border=1, ln=True)

    pdf.ln(6)

    # Prediction Result
    pdf.set_font("Noto", "B", 12)
    pdf.cell(0, 10, T["diagnose"] + ":", ln=True)
    pdf.set_font("Noto", "", 11)
    pdf.multi_cell(0, 8, result)
    pdf.ln(4)

    # Advice
    pdf.set_font("Noto", "B", 12)
    pdf.cell(0, 10, T["advice"] + ":", ln=True)
    pdf.set_font("Noto", "", 11)
    pdf.multi_cell(0, 8, advice)
    pdf.ln(4)

    # Timestamp
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    pdf.set_font("Noto", "", 9)
    pdf.cell(0, 10, f"Generated on: {now}", ln=True)

    # тЬЕ Generate PDF bytes without `.encode()`
    pdf_bytes = pdf.output(dest='S')  # This is already a bytearray
    b64 = base64.b64encode(pdf_bytes).decode('utf-8')

    return f'<a href="data:application/pdf;base64,{b64}" download="Health_Report.pdf">{T["download"]}</a>'

if selection == T["home"]:
    st.title(T["title"])
    st.markdown(f"### ЁЯСЛ {T['welcome']}")
    
    st.markdown(T["about"])
    st.markdown(f"""
    - ЁЯлА **{T['heart']}**
    - ЁЯй╕ **{T['diabetes']}**
    - ЁЯза **{T['parkinsons']}**
    """)
    
    st.markdown(T["instructions"])
    st.markdown(T["purpose"])

    st.markdown("----")
    st.markdown(T["disclaimer"])


elif selection == T["heart"]:
    st.header(T["heart"] + " ЁЯлА")
    inputs = T["inputs_heart"]
    
    name = st.text_input(inputs["name"])
    age = st.slider(inputs["age"], 1, 100)
    sex = st.selectbox(inputs["sex"], inputs["options"]["sex"])

    cp = st.selectbox(inputs["cp"], [0, 1, 2, 3])
    trestbps = st.number_input(inputs["trestbps"], 0)
    chol = st.number_input(inputs["chol"], 0)
    fbs = st.selectbox(inputs["fbs"], [0, 1])
    restecg = st.selectbox(inputs["restecg"], [0, 1, 2])
    thalach = st.number_input(inputs["thalach"], 0)
    exang = st.selectbox(inputs["exang"], [0, 1])
    oldpeak = st.number_input(inputs["oldpeak"], 0.0)
    slope = st.selectbox(inputs["slope"], [0, 1, 2])
    ca = st.selectbox(inputs["ca"], [0, 1, 2, 3])
    thal = st.selectbox(inputs["thal"], [1, 2, 3])

    if st.button(T["diagnose"]):
        # Convert 'sex' from string to integer
        sex_value = int(sex.split(" - ")[0])

        features = [
            age, sex_value, cp, trestbps, chol, fbs, restecg,
            thalach, exang, oldpeak, slope, ca, thal
        ]
        result = predict_heart_disease(features)

        pdf_result = (
            f"{T['risk']}: {T['heart']}"
            if result == 1
            else f"{T['no_risk']}: {T['heart']}"
        )
        advice = (
            T["advice_heart_positive"]
            if result == 1
            else T["advice_heart_negative"]
        )

        if result == 1:
            st.error(f"тЪая╕П {T['risk']} {T['heart']}")
        else:
            st.success(f"тЬЕ {T['no_risk']} {T['heart']}")

        input_summary = {
        inputs["age"]: age,
        inputs["sex"]: sex,
        inputs["cp"]: cp,
        inputs["trestbps"]: trestbps,
        inputs["chol"]: chol,
        inputs["fbs"]: fbs,
        inputs["restecg"]: restecg,
        inputs["thalach"]: thalach,
        inputs["exang"]: exang,
        inputs["oldpeak"]: oldpeak,
        inputs["slope"]: slope,
        inputs["ca"]: ca,
        inputs["thal"]: thal,
        }

        st.markdown(generate_pdf(name, pdf_result, advice, T, input_summary), unsafe_allow_html=True)
        st.info(f"{T['advice']}: {advice}")


elif selection == T["diabetes"]:
    st.header(T["diabetes"] + " ЁЯй╕")
    inputs = T["inputs_diabetes"]
    name = st.text_input(inputs["name"])
    age = st.slider(inputs["age"], 1, 100)
    sex = st.selectbox(inputs["sex"], inputs["options"]["sex"])
    pregnancies = st.number_input(inputs["pregnancies"], 0)
    glucose = st.number_input(inputs["glucose"], 0)
    bp = st.number_input(inputs["blood_pressure"], 0)
    skin = st.number_input(inputs["skin_thickness"], 0)
    insulin = st.number_input(inputs["insulin"], 0)
    bmi = st.number_input(inputs["bmi"], 0.0)
    dpf = st.number_input(inputs["dpf"], 0.0)
    if st.button(T["diagnose"]):
        features = [pregnancies, glucose, bp, skin, insulin, bmi, dpf, age]
        result = predict_diabetes(features)
        pdf_result = f"{T['risk']}: {T['diabetes']}" if result == 1 else f"{T['no_risk']}: {T['diabetes']}"
        advice = T["advice_diabetes_positive"] if result == 1 else T["advice_diabetes_negative"]
        if result == 1:
            st.error(f"тЪая╕П {T['risk']} {T['diabetes']}")
        else:
            st.success(f"тЬЕ {T['no_risk']} {T['diabetes']}")

        input_summary = {
        inputs["age"]: age,
        inputs["sex"]: sex,
        inputs["pregnancies"]: pregnancies,
        inputs["glucose"]: glucose,
        inputs["blood_pressure"]: bp,
        inputs["skin_thickness"]: skin,
        inputs["insulin"]: insulin,
        inputs["bmi"]: bmi,
        inputs["dpf"]: dpf,
        }
        st.markdown(generate_pdf(name, pdf_result, advice, T, input_summary), unsafe_allow_html=True)
        st.info(f"{T['advice']}: {advice}")


elif selection == T["parkinsons"]:
    st.header(T["parkinsons"] + " ЁЯза")
    inputs = T["inputs_parkinsons"]
    
    name = st.text_input(inputs["name"])
    age = st.slider(inputs["age"], 1, 100)

    # If 'sex' and 'options' are inside, handle them:
    if "sex" in inputs and "options" in inputs:
        sex = st.selectbox(inputs["sex"], inputs["options"]["sex"])
        start_idx = 3  # Skip name, age, sex
    else:
        start_idx = 2  # Skip name, age

    # Get the remaining keys for features
    feature_keys = list(inputs.keys())[start_idx:]

    # Get number inputs for each
    features = []
    for key in feature_keys:
        if isinstance(inputs[key], str):  # Ensure it's a string label
            val = st.number_input(inputs[key], 0.0)
            features.append(val)

    if st.button(T["diagnose"]):
        result = predict_parkinsons(features)
        pdf_result = f"{T['risk']}: {T['parkinsons']}" if result == 1 else f"{T['no_risk']}: {T['parkinsons']}"
        advice = T["advice_parkinsons_positive"] if result == 1 else T["advice_parkinsons_negative"]

        # Prepare input summary
        input_summary = {
            inputs["name"]: name,
            inputs["age"]: age
        }

        if "sex" in inputs:
            input_summary[inputs["sex"]] = sex

        for i in range(len(features)):
            key = feature_keys[i]
            input_summary[inputs[key]] = features[i]
        if result == 1:
            st.error(f"тЪая╕П {T['risk']} {T['parkinsons']}")
        else:
            st.success(f"тЬЕ {T['no_risk']} {T['parkinsons']}")

        st.markdown(generate_pdf(name, pdf_result, advice, T, input_summary), unsafe_allow_html=True)

        st.info(f"{T['advice']}: {advice}")

    



